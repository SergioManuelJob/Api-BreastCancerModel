# -*- coding: utf-8 -*-
"""Breast-Cancer NaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HfaRkY3hMXrYxjv30R7o6G5yeCCtQ3Ul

# Sergio Manuel Suárez Suárez
"""
# Imports
import pandas as pd
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import KFold
import warnings
warnings.filterwarnings("ignore")


# Load the dataset
df = pd.read_csv('https://raw.githubusercontent.com/SergioManuelJob/data/master/BreastCancer.csv')

# Processing of data

df = df.drop(['id', 'Unnamed: 32'], axis=1)

columns_to_delete = ["radius_mean", "perimeter_mean", "area_mean", "radius_worst", "perimeter_worst", "texture_mean", "compactness_mean", "concavity_mean", "concave points_mean", "radius_se", "perimeter_se", "compactness_worst", "concave points_worst"]
df = df.drop(columns_to_delete, axis=1)

# I'm going to normalize the data using minmax scaler which converts the values into a range of 0 and 1
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

aux = df['diagnosis']
df = df.drop(['diagnosis'], axis=1)

normalized_data = scaler.fit_transform(df)

df = pd.DataFrame(normalized_data, columns=df.columns)
df = pd.concat([df, aux], axis=1)

# Training

y = df['diagnosis']
df = df.drop(['diagnosis'], axis=1)
y.head()

selected_columns = ['texture_worst', 'area_worst', 'smoothness_worst', 'concavity_worst']
x = df[selected_columns]
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=42)

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(random_state=42)
rfc.fit(X_train, y_train)
y_pred = rfc.predict(X_test)

accuracy = metrics.accuracy_score(y_test, y_pred)
print("Precisión del modelo:", accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)

# Export and load model

import sklearn.externals
import pickle

pickle.dump(rfc, open('model.pkl','wb'))
model = pickle.load(open('model.pkl','rb'))
print(model.predict([[0.8, 0.04, 0.1, 0.2]]))

